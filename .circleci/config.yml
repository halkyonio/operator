# Golang CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-go/ for more details
version: 2.1

orbs:
  # defined at https://github.com/snowdrop/circleci-orbs
  # needs to have been published before being used here
  openshift: snowdrop/openshift@0.4.0

executors:
  go-executor:
    environment:
      GO111MODULE: "on"
    docker:
      - image: circleci/golang:1.13.5
    working_directory: /go/src/halkyon.io/operator

commands:
  install-kubectl:
    steps:
      - run:
          name: Install kubectl
          command: |
            KUBE_VERSION=v1.13.0
            curl -LO https://storage.googleapis.com/kubernetes-release/release/${KUBE_VERSION}/bin/linux/amd64/kubectl
            chmod +x ./kubectl && sudo mv ./kubectl /usr/local/bin/kubectl
  install-snap:
    steps:
      - run:
          name: Install snap
          command: |
            sudo apt update -y
            sudo apt install snapd -y
  install-microk8s:
    steps:
      - run:
          name: Install microk8s
          command: |
            MICROK8S_VERSION=1.13
            sudo snap install microk8s --classic --channel=${MICROK8S_VERSION}/stable

            # wait until a k8s node is ready
            sleep 10
            n=0
            until [ $n -ge 15 ]
            do
              (/snap/bin/microk8s.kubectl get no | grep -z "Ready") && break
              n=$[$n+1]
              sleep 20
            done
            echo "Kubernetes cluster launched"

            # Allow intra-pod communication
            sudo iptables -P FORWARD ACCEPT

            /snap/bin/microk8s.enable dns storage
            /snap/bin/microk8s.enable ingress
  install-helm:
    steps:
      - run:
          name: Install helm
          command: |
            curl -LO https://git.io/get_helm.sh
            chmod +x get_helm.sh
            ./get_helm.sh --version v2.14.3

            helm init
            until kubectl get pods -n kube-system -l name=tiller | grep 1/1; do sleep 1; done
            kubectl create clusterrolebinding tiller-cluster-admin --clusterrole=cluster-admin --serviceaccount=kube-system:default
  install-kubedb:
    steps:
      - run:
          name: Install kubedb
          command: |
            helm repo add appscode https://charts.appscode.com/stable/
            helm repo update
            KUBEDB_VERSION=0.12.0
            helm install appscode/kubedb --name kubedb-operator --version ${KUBEDB_VERSION} \
            --namespace kubedb --set apiserver.enableValidatingWebhook=false,apiserver.enableMutatingWebhook=false
  install-kubedb-catalog:
    steps:
      - run:
          name: Install kubedb catalog
          command: |
            TIMER=0
            until kubectl get crd elasticsearchversions.catalog.kubedb.com memcachedversions.catalog.kubedb.com mongodbversions.catalog.kubedb.com mysqlversions.catalog.kubedb.com postgresversions.catalog.kubedb.com redisversions.catalog.kubedb.com || [[ ${TIMER} -eq 60 ]]; do
              sleep 2
              TIMER=$((TIMER + 1))
            done
            KUBEDB_VERSION=0.12.0
            helm install appscode/kubedb-catalog --name kubedb-catalog --version ${KUBEDB_VERSION} \
            --namespace kubedb --set catalog.postgres=true,catalog.elasticsearch=false,catalog.etcd=false,catalog.memcached=false,catalog.mongo=false,catalog.mysql=false,catalog.redis=false
  install-halkyon-operator:
    steps:
      - run:
          name: Install halkyon operator
          command: |
            kubectl create namespace operators
            CIRCLE_WORKING_DIRECTORY="${CIRCLE_WORKING_DIRECTORY/#\~/$HOME}"
            kubectl apply -f ${CIRCLE_WORKING_DIRECTORY}/deploy/sa.yaml -n operators
            kubectl apply -f ${CIRCLE_WORKING_DIRECTORY}/deploy/cluster-role.yaml
            kubectl apply -f ${CIRCLE_WORKING_DIRECTORY}/deploy/user-rbac.yaml
            kubectl apply -f ${CIRCLE_WORKING_DIRECTORY}/deploy/cluster-role-binding.yaml
            kubectl apply -f ${CIRCLE_WORKING_DIRECTORY}/deploy/crds/capability.yaml
            kubectl apply -f ${CIRCLE_WORKING_DIRECTORY}/deploy/crds/component.yaml
            kubectl apply -f ${CIRCLE_WORKING_DIRECTORY}/deploy/crds/link.yaml
            kubectl apply -f ${CIRCLE_WORKING_DIRECTORY}/deploy/operator.yaml -n operators
  install-tekton:
    steps:
      - run:
          name: Install tekton
          command: |
            TEKTON_VERSION=v0.9.1
            kubectl apply -f https://storage.googleapis.com/tekton-releases/pipeline/previous/${TEKTON_VERSION}/release.yaml
  install-dekorate-snapshot:
    steps:
      - run:
          name: Build Dekorate SNAPSHOT and use it in a demo app
          command: |
            cd demo
            git clone https://github.com/dekorateio/dekorate.git
            DEKORATE_VERSION=$(./mvnw help:evaluate -Dexpression=project.version -q -DforceStdout -f dekorate/pom.xml | tail -1)
            ./mvnw install -f dekorate/pom.xml -Dmaven.test.skip=true
            rm -rf dekorate
            sed -i -E "s/(<dekorate.version>).+(<\/dekorate.version>)/\1${DEKORATE_VERSION}\2/" pom.xml
            cd ..
  setup-registry-dns:
    parameters:
      svc:
        type: string
      ns:
        type: string
    steps:
      - run:
          name: Setup Docker registry host
          command: |
            REGISTRY_IP=$(kubectl get service/<< parameters.svc >> -n << parameters.ns >> -o jsonpath='{.spec.clusterIP}')
            echo "$REGISTRY_IP << parameters.svc >> << parameters.svc >>.<< parameters.ns >> << parameters.svc >>.<< parameters.ns >>.svc" | sudo tee -a /etc/hosts
  test-e2e:
    parameters:
      namespace:
        type: string
        default: test
      mode:
        type: string
        default: dev
    steps:
      - run:
          name: Run e2e test
          no_output_timeout: 20m
          command: |
            echo "Running '<< parameters.mode >>' mode e2e test in a '<< parameters.namespace >>' namespace"
            cd demo

            # Set a correct deploymentMode in a component configuration
            sed -i -E "s/(deploymentMode:).*/\1 << parameters.mode >>/g" fruit-backend-sb/src/main/resources/application.yml
            sed -i -E "s/(deploymentMode:).*/\1 << parameters.mode >>/g" fruit-client-sb/src/main/resources/application.yml

            ./scripts/end-to-end_fruit_demo.sh 127.0.0.1 << parameters.namespace >> << parameters.mode >>
            cd ..
      - store_artifacts:
          path: ./demo/report.txt
          destination: report-<< parameters.mode >>.txt

jobs:
  # Steps
  # - Checkout the git project
  # - Install the missing packages
  # - Generate the Assets (template such crud, rest, custom, ...)
  # - Build the go operator
  # - Execute local tests using kubebuilder envtests which runs locally a Kube API and etcd servers
  build:
    executor: go-executor

    steps:
    - checkout
    - run:
        name: Build go operator
        command: |
          make build
          make test
          make cross

  # Steps
  # - Checkout the git project
  # - Install the missing packages
  # - Generate the Assets (template such crud, rest, custom, ...)
  # - Build the go operator
  # - Create the docker image of the operator and publish it on quay
  docker-image:
    executor: go-executor

    steps:
    - checkout
    - setup_remote_docker:
        docker_layer_caching: false
    - run:
        name: Build go operator and generate docker image
        command: |
          VERSION=master
          make build-linux
          docker build -t operator:${VERSION} -f build/Dockerfile .
          TAG_ID=$(docker images -q operator:${VERSION})
          docker tag ${TAG_ID} quay.io/halkyonio/operator:${VERSION}
          docker tag ${TAG_ID} quay.io/halkyonio/operator:latest
          docker login quay.io -u="${QUAY_ROBOT_USER}" -p="${QUAY_ROBOT_TOKEN}"
          docker push quay.io/halkyonio/operator:${VERSION}
          docker push quay.io/halkyonio/operator:latest

  okd-dev-e2e-test:
    machine: true
    steps:
    - checkout
    - openshift/launch_openshift
    - install-helm
    - install-kubedb
    - install-kubedb-catalog
    - install-halkyon-operator
    - install-tekton
    - setup-registry-dns:
        ns: default
        svc: docker-registry
    - test-e2e:
        namespace: e2e-dev
        mode: dev

  okd-build-e2e-test:
    machine: true
    steps:
      - checkout
      - openshift/launch_openshift
      - install-helm
      - install-kubedb
      - install-kubedb-catalog
      - install-halkyon-operator
      - install-tekton
      - setup-registry-dns:
          ns: default
          svc: docker-registry
      - test-e2e:
          namespace: e2e-build
          mode: build

  okd-e2e-test-dekorate-snapshot:
    machine: true
    steps:
    - checkout
    - openshift/launch_openshift
    - install-helm
    - install-kubedb
    - install-kubedb-catalog
    - install-halkyon-operator
    - install-tekton
    - install-dekorate-snapshot
    - setup-registry-dns:
        ns: default
        svc: docker-registry
    - test-e2e:
        namespace: e2e-dev
        mode: dev
    - test-e2e:
        namespace: e2e-build
        mode: build

  k8s-dev-e2e-test:
    machine: true
    steps:
      - checkout
      - install-kubectl
      - install-snap
      - install-microk8s
      - install-helm
      - install-kubedb
      - install-kubedb-catalog
      - install-halkyon-operator
      - install-tekton
      - test-e2e:
          namespace: e2e-dev
          mode: dev

  k8s-e2e-test-dekorate-snapshot:
    machine: true
    steps:
    - checkout
    - install-kubectl
    - install-snap
    - install-microk8s
    - install-helm
    - install-kubedb
    - install-kubedb-catalog
    - install-halkyon-operator
    - install-tekton
    - install-dekorate-snapshot
    - test-e2e:
        namespace: e2e-dev
        mode: dev
    # - test-e2e:
    #     namespace: e2e-build
    #     mode: build

  # Creates a github release and pushes all the assets
  release:
    executor: go-executor

    steps:
    - checkout

    - run:
        name: Install gox
        command: |
          export GO111MODULE="on"
          go get github.com/mitchellh/gox

    - run:
        name: Install file
        command:
          sudo apt-get install file

    - run:
        name: Perform release
        command: |
          tagRE='release-(.*)'
          if [[ "${CIRCLE_TAG}" =~ ${tagRE} ]]; then
            # This will use gox to create the artifacts and the scripts in scripts to do the actual release
            # For the is to work, the GITHUB_API_TOKEN env var needs to be set in the CircleCI config
            make upload VERSION=${BASH_REMATCH[1]}
          else
            echo "${CIRCLE_TAG} does NOT match the expected pattern. This is probably a job configuration issue"
            exit 1
          fi

  # Creates a docker image from a github release
  docker-image-release:
    executor: go-executor

    steps:
    - checkout
    - setup_remote_docker:
        docker_layer_caching: false
    - run:
        name: Build Docker image
        command: |
          tagRE='release-(.*)'
          if [[ "${CIRCLE_TAG}" =~ ${tagRE} ]]; then
            VERSION=${BASH_REMATCH[1]}
            DOCKER_TAG=v${VERSION}

            make build-linux

            docker build -t operator:${DOCKER_TAG} -f build/Dockerfile .
            TAG_ID=$(docker images -q operator:${DOCKER_TAG})
            docker tag ${TAG_ID} quay.io/halkyonio/operator:${DOCKER_TAG}
            docker tag ${TAG_ID} quay.io/halkyonio/operator:latest
            docker login quay.io -u="${QUAY_ROBOT_USER}" -p="${QUAY_ROBOT_TOKEN}"
            docker push quay.io/halkyonio/operator:${DOCKER_TAG}
            docker push quay.io/halkyonio/operator:latest

            # Remove the trigger tag
            scripts/delete_release_manually.sh "${GITHUB_API_TOKEN}" "${CIRCLE_TAG}"

            # Add the commits that correspond to the tag to the description of the GitHub reelase
            scripts/update_release_change_log.sh "${GITHUB_API_TOKEN}" "v${VERSION}"
          else
            echo "${CIRCLE_TAG} does NOT match the expected pattern. This is probably a job configuration issue"
            exit 1
          fi

workflows:
  version: 2
  build-operator:
    jobs:
    - docker-image
    - okd-dev-e2e-test:
        requires:
          - docker-image
    - okd-build-e2e-test:
        requires:
          - docker-image
    # - okd-e2e-test-dekorate-snapshot:
    #     requires:
    #       - docker-image
    - k8s-dev-e2e-test:
        requires:
          - docker-image
    # - k8s-e2e-test-dekorate-snapshot:
    #     requires:
    #       - docker-image
  release-operator:
    jobs:
    - release:
        filters:
          tags:
            only: /^release-.*$/
          branches:
            ignore: /.*/
    - docker-image-release:
        requires:
          - release
        filters:
          tags:
            only: /^release-.*$/
          branches:
            ignore: /.*/
